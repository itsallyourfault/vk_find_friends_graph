import random
import vk
import json
import os
import time
import requests
import boto3
import hashlib
from urllib import parse
from urllib.parse import urlparse
from requests.auth import HTTPBasicAuth



def generate_link(pay_amount, user_id):
    user = "admin"
    password = "***"

    server_paykeeper = "***"

    uri_token = "/info/settings/token/"
    uri_invoice = "/change/invoice/preview/"

    payment_data = {
        "pay_amount": pay_amount,
        "clientid": str(user_id)
    }

    auth = HTTPBasicAuth(user, password)

    response = requests.get(server_paykeeper + uri_token, auth=auth, data=payment_data)

    response_json = response.json()

    if "token" in response_json:
        token = response_json["token"]
    else:
        return

    print(token)

    payment_data["token"] = token

    response = requests.post(server_paykeeper + uri_invoice, data = payment_data, auth=auth)

    response_json = response.json()

    if "invoice_id" in response_json:
        invoice_id = response_json["invoice_id"]
    else:
        return

    link = f"{server_paykeeper}/bill/{invoice_id}/"

    return link



def links_to_id(text):
    res = ''
    res = text.replace('https://', '')
    res = res.replace('http://', '')
    res = res.replace('www.vk.com/', '')
    res = res.replace('vk.com/', '')
    res = ' '.join(res.split())
    check_str = res.split(' ')

    if len(check_str) == 2:
        return check_str
    if len(check_str) == 1:
        return check_str

    return 'WRONG_SEARCH_FUNC'


def vk_callback(lambda_event, token):

    #start_text = "–ü—Ä–∏–≤–µ—Ç! üëãüèª –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É –Ω–∞—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!\n\n‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\nüí• –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ü–µ–ø–æ—á–∫—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏ –≤–æ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n‚ùì–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã —Å–ª—ã—à–∞–ª —á—Ç–æ-—Ç–æ –æ —Ç–µ–æ—Ä–∏–∏ 6 —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π? –î–∞-–¥–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –º—ã –∑–¥–µ—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º!\n\n‚ùó–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞, –¥–∞–ª–µ–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–π—Ç–∏ —Ü–µ–ø–æ—á–∫—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n–ü–æ–∏—Å–∫ –∏–¥–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–ø–æ—á–∫—É, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞! ‚úÖ\n\nüîî –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–∏—Å–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!\n\n‚úåüèª –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    start_text = "–ü—Ä–∏–≤–µ—Ç! üëãüèª –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É –Ω–∞—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!\n\nüí• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å –∫–µ–º —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!"

    #insrt_text = "üîé –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\nüí¨–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n–ü–æ–∏—Å–∫ (–°—Å—ã–ª–∫–∞ –∏–ª–∏ ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–°—Å—ã–ª–∫–∞ –∏–ª–∏ ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n‚ùó–í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '—è', —Ç–∞–∫ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –≤–∞—à ID\n\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:\nüí¨ –ü–æ–∏—Å–∫ id11111 id22222\nüí¨ –ü–æ–∏—Å–∫ vk.com/firstuser vk.com/seconduser\nüí¨ –ü–æ–∏—Å–∫ —è durov\n\n‚ùó–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –µ—Å—Ç—å —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—Ä—É—à–∞—Ç—å –Ω–µ —Ö–æ—Ç–∏–º –∏ –Ω–µ –º–æ–∂–µ–º, –µ—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å—É—Ç–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n‚ùó–°–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    insrt_text = "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —á–µ–ª–æ–≤–µ–∫–∞ —Å –∫–µ–º —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π!\n –ù–∞–ø—Ä–∏–º–µ—Ä: vk.com/a4\n –ï—Å–ª–∏ —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!"

    keyboard_new = {
        "one_time": False,
        "buttons": [
            [
                #{
                #    "action": {
                #        "type": "text",
                #        "payload": "{\"button\": \"1\"}",
                #        "label": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
                #    },
                #    "color": "negative"
                #},
                {
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"2\"}",
                        "label": "–ü–æ–∏—Å–∫"
                    },
                    "color": "positive"
                }

            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"2\"}",
                        "label": "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                    },
                    "color": "primary"
                },
                {
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"3\"}",
                        "label": "–ë–∞–ª–∞–Ω—Å"
                    },
                    "color": "primary"
                },

            ],
            [
                
                {
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"1\"}",
                        "label": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                    },
                    "color": "negative"
                },
            ]
        ]}
    keyboard_auth = {
        "one_time": False,
        "inline": True,
        "buttons": [
            [
                {
                    "action": {
                        "type": "open_link",
                        "payload": "{\"button\": \"2\"}",
                        "link": "https://oauth.vk.com/authorize?client_id=8049680&redirect_uri=https://functions.yandexcloud.net/d4epbm3dn86eprcb1k1n&scope=friends,offline&response_type=code",
                        "label": "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                    },

                },
            ]
        ]}
    instructionKeyboardButton = {
        "one_time": False,
        "inline": True,
        "buttons": [
            [
                {
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"2\"}",
                        "label": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
                    },

                },
            ]
        ]
    }

    keyboard_pay_not_inline = {
                "one_time": False,
                "inline": False,
                "buttons": [
                    [
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"59\"}",
                                "label": "5 –ü–æ–∏—Å–∫–æ–≤ - 59 —Ä—É–±."
                            },
                            "color": "positive"

                        }
                    ],
                    [
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"99\"}",
                                "label": "10 –ü–æ–∏—Å–∫–æ–≤ - 99 —Ä—É–±."
                            },
                            "color": "positive"

                        }
                    ],
                    [
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"159\"}",
                                "label": "20 –ü–æ–∏—Å–∫–æ–≤ - 159 —Ä—É–±."
                            },
                            "color": "positive"

                        }
                    ],
                    [
                        {
                            "action": {
                                "type": "text",
                                "payload": "{\"button\": \"3\"}",
                                "label": "–ù–∞–∑–∞–¥"
                            },
                            "color": "primary"

                        }
                    ]
                ]}

        
    
    

    session = vk.Session()
    api = vk.API(session, v=5.131)
    event = json.loads(lambda_event)

    

    if "type" not in event:
        return
    if event['type'] == 'message_new':
        msg_text = event['object']['message']['text']
        user_id = event['object']['message']['from_id']
        if (msg_text == '–ù–∞—á–∞—Ç—å') or (msg_text == '–Ω–∞—á–∞—Ç—å')or (msg_text == 'Start')or (msg_text == 'start'):
            api.messages.send(access_token=token, user_id=str(user_id), message=start_text, random_id=int(
                time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
            time.sleep(1)
            #api.messages.send(access_token=token, user_id=str(user_id),
            #                      message="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:", random_id=int(
            #            time.time()) * 10000000, keyboard=json.dumps(keyboard_auth))
        elif ((os.getenv('service_status') == "timeout") and (str(user_id) != "admin_id")):
            api.messages.send(access_token=token, user_id=str(user_id), message="–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", random_id=int(
                time.time()) * 10000000)
        elif (msg_text == '–ë–∞–ª–∞–Ω—Å') or (msg_text == '–±–∞–ª–∞–Ω—Å'):
            params = {
                "r_type": "get_user_balance",
                "user_id": user_id
            }
            balance = requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                   params=params)
            if (json.loads(balance.text) == "User not found"):
                 balance = requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                   params=params)

            api.messages.send(access_token=token, user_id=str(user_id),
                              message="–í–∞—à –±–∞–ª–∞–Ω—Å: " + balance.text + " –∑–∞–ø—Ä–æ—Å–æ–≤. üîé", random_id=int(
                    time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
        elif (msg_text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å') or (msg_text == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'):
            keyboard_new_pay = {
                "one_time": False,
                "inline": True,
                "buttons": [
                    [
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"59\"}",
                                "label": "5 - 59 —Ä—É–±."
                            },

                        },
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"99\"}",
                                "label": "10 - 99 —Ä—É–±."
                            },

                        },
                    ],
                    [
                        {
                            "action": {
                                "type": "callback",
                                "payload": "{\"type\": \"pay\", \"amount\": \"159\"}",
                                "label": "20 - 159 —Ä—É–±."
                            },

                        }
                        #{
                        #    "action": {
                        #        "type": "callback",
                        #        "payload": "{\"type\": \"pay\", \"amount\": \"449\"}",
                        #        "label": "20 - 449 —Ä—É–±."
                        #    },
                        #},
                    ]
                ]}
            params = {
                "r_type": "get_user_balance",
                "user_id": user_id
            }
            balance = requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                   params=params)
            if (json.loads(balance.text) == "User not found"):
                 balance = requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                   params=params)
            api.messages.send(access_token=token, user_id=str(user_id),
                              message="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n‚ùó –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å VPN!", random_id=int(
                    time.time()) * 10000000, keyboard=json.dumps(keyboard_pay_not_inline))
        elif (msg_text == 'god_give_me_money'):

            params = {
                "r_type": "get_user_balance",
                "user_id": user_id
            }
            balance = (requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                    params=params))
            if (balance.text == "User not found"):
                api.messages.send(access_token=token, user_id=str(user_id),
                                  message="üí¨ –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!", random_id=int(
                        time.time()) * 10000000, keyboard=json.dumps(keyboard_auth))
                return
            new_balance = int(balance.text) + 10
            params = {
                "r_type": "update_user_balance",
                "user_id": user_id,
                "new_balance": new_balance
            }
            requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og", params=params)
            api.messages.send(access_token=token, user_id=str(user_id), message="–ë–æ–≥ –≤–∞—Å —É—Å–ª—ã—à–∞–ª!", random_id=int(
                time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
            time.sleep(2)
            api.messages.send(access_token=token, user_id=str("335328970"), message="–ì–æ–¥ –≥–∏–≤–∏ –º–∏ –º–æ–Ω–∏ –æ—Ç - vk.com/id" + str(user_id), random_id=int(
                time.time()) * 10000000)
        elif (msg_text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è') or (msg_text == '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'):
            api.messages.send(access_token=token, user_id=str(user_id), message=insrt_text, random_id=int(
                time.time()) * 10000000, keyboard=json.dumps(keyboard_pay_not_inline)
                #, attachment="doc-210111570_642257694"
                )
        elif (msg_text == '–ù–∞–∑–∞–¥'):
            api.messages.send(access_token=token, user_id=str(user_id), message="–ú–µ–Ω—é", random_id=int(
                time.time()) * 10000000, keyboard=json.dumps(keyboard_new)
                #, attachment="doc-210111570_642257694"
                )
            
        elif (msg_text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') or (msg_text == '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'):

            api.messages.send(access_token=token, user_id=str(user_id), message="–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –µ—Å–ª–∏ —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞",
                              random_id=int(
                                  time.time()) * 10000000, keyboard=json.dumps(keyboard_auth))
        elif (msg_text == '1rub'):
            link = generate_link(str(1), str(user_id))
            api.messages.send(access_token=token, user_id=str(user_id),
                              message=str(link),
                              random_id=int(time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
            return
        elif (msg_text == '–ü–æ–∏—Å–∫'):
            api.messages.send(access_token=token, user_id=str(user_id), message=insrt_text,
                              random_id=int(
                                  time.time()) * 10000000, keyboard=json.dumps(keyboard_new)
                                  #, attachment="doc-210111570_642257694"
                                  )

        elif (msg_text[:5] == '–ü–æ–∏—Å–∫') or (msg_text[:5] == '–ø–æ–∏—Å–∫') or ('vk.com' in msg_text):

            request_type = "full_access"
            

            params = {
                "r_type": "get_user_balance",
                "user_id": user_id
            }
            balance = (requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                    params=params))
            if (json.loads(balance.text) == "User not found"):
                balance = (requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                    params=params))
                
            params = {
                    "r_type": "get_query_status",
                    "user_id": user_id
                    }
            queryStatus = (requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                params=params))
            if queryStatus.text == 'True':
                api.messages.send(access_token=token, user_id=str(user_id),
                                  message="‚ùó –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", random_id=int(
                        time.time()) * 10000000)
                return


            balance = int(balance.text)
            if (balance < 1):

                request_type = "demo_access"

                #api.messages.send(access_token=token, user_id=str(user_id),
                #                  message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–∞–ø—Ä–æ—Å–æ–≤ üí∏",
                #                  random_id=int(
                #                      time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
                #return

            
            
                        
            if (msg_text[:5] == '–ü–æ–∏—Å–∫') or (msg_text[:5] == '–ø–æ–∏—Å–∫'):
                ids = links_to_id(msg_text[6:])
            else:
                ids = links_to_id(msg_text)
            if ids != 'WRONG_SEARCH_FUNC':
                if len(ids) == 2:
                    if (ids[0] == '—è') or (ids[0] == '–Ø'):
                        ids[0] = user_id
                    elif (ids[1] == '—è') or (ids[1] == '–Ø'):
                        ids[1] = user_id
                elif len(ids) == 1:
                    ids = [str(user_id), ids[0]]

                if request_type == "full_access":
                    new_balance = balance - 1
                    params = {
                        "r_type": "update_user_balance",
                        "user_id": user_id,
                        "new_balance": new_balance
                    }
                    requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                                params=params)

                api.messages.send(access_token=token, user_id=str(user_id),
                                  message=f'üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –º–µ–∂–¥—É –í–∞–º–∏ –∏ {ids[1]}', random_id=int(
                        time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
                        
                datatosend = {
                    "user_id": int(user_id),
                    "entrance_id": ids[0],
                    "target_id": ids[1],
                    "request_type": request_type
                }
                try:
                    client = boto3.client(
                    service_name='sqs',
                    endpoint_url='https://message-queue.api.cloud.yandex.net',
                    region_name='ru-central1'
                    )

                    params = {
                    "r_type": "update_query_status",
                    "user_id": user_id,
                    "new_status": True
                    }
                    queryStatus = (requests.get("https://functions.yandexcloud.net/d4e15rdqtnakc2noq0og",
                        params=params))

                    # Send message to queue
                    client.send_message(
                        QueueUrl="https://message-queue.api.cloud.yandex.net/b1g96b95lu5trfs7poul/dj6000000005ifbb05g9/vkbot-power",
                        MessageBody=json.dumps(datatosend)
                    )

                    

                    
                except Exception as e:
                    api.messages.send(access_token=token, user_id=str(user_id),
                                  message='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å', random_id=int(
                                    time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
            
            

            else:
                api.messages.send(access_token=token, user_id=str(user_id),
                                  message="‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å.",
                                  random_id=int(
                                      time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
        else:
            api.messages.send(access_token=token, user_id=str(user_id),
                              message="‚ö† –Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å :(",
                              random_id=int(time.time()) * 10000000, keyboard=json.dumps(keyboard_new))
    if event['type'] == 'message_event':
        
        clb_type = event['object']['payload']['type']
        user_id = event['object']['user_id']

        if clb_type == "pay":
            clb_amount = event['object']['payload']['amount']
            link = generate_link(str(clb_amount), str(user_id))
            data = {
                "type": "open_link",
                "link": link
            }
            api.messages.sendMessageEventAnswer(
                                access_token=token,
                                event_id=event['object']['event_id'],
                                user_id=event['object']['user_id'],
                                peer_id=event['object']['peer_id'],
                                event_data=json.dumps(data)
                                )
            return



def handler(event, context):
    try:
        if json.loads(event["body"])["type"] == "auth":
            session = vk.Session()
            api = vk.API(session, v=5.131)
            api.messages.send(access_token=str(os.getenv('token')), user_id=json.loads(event["body"])["user_id"],
                              message="‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!", random_id=int(
                    time.time()) * 10000000)
            return {
                'statusCode': 200,
                'body': "OK"

            }
        
    except Exception as e:
        pass

    try:
        if json.loads(event["body"])["type"] == "confirmation" and json.loads(event["body"])["group_id"] == "your_group_id_as_int":
            data = "b98cc701"
            return {
                'statusCode': 200,
                'body': data
            }

        if json.loads(event["body"])["secret"] == "secter_key_here_as_str":
            vk_callback(event["body"], os.getenv('token'))

        return {
            'statusCode': 200,
            'body': "OK"
        }

    except Exception as e:
        
        rep = str(e)
        return {
            'statusCode': 200,
            'body': "OK"
        }
